Copyright (c) 2013, Javier Liendo
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list 
of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this 
list of conditions and the following disclaimer in the documentation and/or other 
materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.


mn_nx_topos is a small python class definition to create networkx 
(https://www.networkx.lanl.gov) based mininet topologies using networkx graph 
generators (http://networkx.lanl.gov/reference/generators.htm). 

The main idea behind this program is to help reduce the time for bulding complex 
mininet (http://mininet.github.com/) network topologies and go directly 
to the experimental usage of mininet and openflow.

Usage examples:

$ sudo mn --custom mn_nx_topos.py --topo balanced_tree,r=2,h=2

Creates a topology where each node has two edges and the height (depth) of the 
tree is of size 2.

$ sudo mn --custom mn_nx_topos.py --topo erdos_renyi,n=10,p=0.6

Creates a random graph (Erdos-Renyi model) of 10 nodes with a probability of 0.6 
of an edge between nodes (be aware that this is a looping topology so you may need 
to run a spanning tree application on your controller to avoid L2 loops in your 
network. Also be aware of your probabilities, you can get a dsconnected network.
Wikipedia is your friend).

TODO: 

Many things:
- Better graphing (interface labeling on topo edges)
- Async displaying of graph and be able to type mininet commands at the console
- ...
